@page "/"
@using PaymentCalculator.Model
@using VoidCore.Model.Functional
@using VoidCore.Model.Events
@using VoidCore.Finance

<div class="container my-4">

<h1>Payment Calculator</h1>

<EditForm Model="_inputModel" OnValidSubmit="@Calc" @onkeypress="@HandleKeyPress">
  <DataAnnotationsValidator />
  <ValidationSummary />

  @if (_validationMessages.Count() > 0)
  {
    <ul class="validation-errors">
      @foreach (var msg in _validationMessages)
      {
        <li class="validation-message">@msg</li>
      }
    </ul>
  }

  <div class="form-row">

    <div class="col-md-6">
      <div class="form-group">
        <label for="AssetCost">Asset Cost</label>
        <InputNumber id="AssetCost" @bind-Value="_inputModel.AssetCost" class="@GetInputCssForField("AssetCost")" />
      </div>

      <div class="form-group">
        <label for="DownPayment">Down Payment</label>
        <InputNumber id="DownPayment" @bind-Value="_inputModel.DownPayment" class="@GetInputCssForField("DownPayment")" />
      </div>

      <div class="form-group">
        <label for="AnnualInterestRate">APR</label>
        <InputNumber id="AnnualInterestRate" @bind-Value="_inputModel.AnnualInterestRate"
                      class="@GetInputCssForField("AnnualInterestRate")" />
      </div>

      <div class="form-group">
        <label for="NumberOfYears">Years</label>
        <InputNumber id="NumberOfYears" @bind-Value="_inputModel.NumberOfYears" class="@GetInputCssForField("NumberOfYears")" />
      </div>

      <div class="form-group">
        <label for="PeriodsPerYear">Period Frequency</label>
        <InputSelect id="PeriodsPerYear" @bind-Value="_inputModel.PeriodsPerYear" class="@GetInputCssForField("PeriodsPerYear")">
          @foreach (var freq in periodFrequencies)
              {
                <option value="@freq.Value">@freq.Key</option>
              }
            </InputSelect>
          </div>

          <div class="form-group">
            <label for="EscrowPerPeriod">Escrow Payment</label>
            <InputNumber id="EscrowPerPeriod" @bind-Value="_inputModel.EscrowPerPeriod"
                          class="@GetInputCssForField("EscrowPerPeriod")" />
          </div>
        </div>

        <div class="col-md-6">
          <div class="form-group">
            <label for="PaymentPerPeriod">Payment</label>
            <InputText id="PaymentPerPeriod" @bind-Value="_outputModel.PaymentPerPeriod" class="form-control" disabled />
          </div>

          <div class="form-group">
            <label for="TotalPrincipal">Loan Amount</label>
            <InputText id="TotalPrincipal" @bind-Value="_outputModel.TotalPrincipal" class="form-control" disabled />
          </div>

          <div class="form-group">
            <label for="TotalInterestPaid">Interest Paid</label>
            <InputText id="TotalInterestPaid" @bind-Value="_outputModel.TotalInterestPaid" class="form-control" disabled />
          </div>

          <div class="form-group">
            <label for="TotalEscrowPaid">Escrow Paid</label>
            <InputText id="TotalEscrowPaid" @bind-Value="_outputModel.TotalEscrowPaid" class="form-control" disabled />
          </div>

          <div class="form-group">
            <label for="TotalPaid">Total Paid</label>
            <InputText id="TotalPaid" @bind-Value="_outputModel.TotalPaid" class="form-control" disabled />
          </div>
        </div>

      </div>

      <div class="form-row">
        <button class="btn btn-dark mr-1" type="submit">Calculate</button>
        <button class="btn btn-dark" @onclick="Clear" @onclick:preventDefault @onclick:stopPropagation>Clear</button>
      </div>
    </EditForm>

  @if(_outputModel.Schedule.Count() > 0) {
    <table class="table table-sm mt-4">
      <thead>
        <tr>
          <th scope="col">#</th>
          <th scope="col">Interest Paid</th>
          <th scope="col">Principal Paid</th>
          <th scope="col">Balance Left</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var period in _outputModel.Schedule)
        {
          <tr>
            <th scope="row">@period.PeriodNumber</th>
            <td>@period.InterestPayment</td>
            <td>@period.PrincipalPayment</td>
            <td>@period.BalanceLeft</td>
          </tr>
        }
      </tbody>
    </table>
  }

</div>

@code {
  private static Dictionary<string, int> periodFrequencies = new Dictionary<string, int>
  {
    ["Monthly"] = 12,
    ["Quarterly"] = 4,
    ["Yearly"] = 1
  };

  private static EventHandlerDecorator<CalculateLoan.Request, CalculateLoan.Response> _calculateLoanHandler = BuildHandler();
  private InputModel _inputModel = new InputModel();
  private OutputModel _outputModel = new OutputModel();
  private IEnumerable<string> _validationMessages = Array.Empty<string>();
  private IEnumerable<string> _validationFields = Array.Empty<string>();

  protected override void OnInitialized()
  {
    Clear();
  }

  // TODO: Razor doesn't support async interactions yet.
  #pragma warning disable CS4014
  private void Calc()
  {
    ShowFailureMessages(Enumerable.Empty<IFailure>());

    var request = ConvertToRequest(_inputModel);

    _calculateLoanHandler
      .Handle(request)
      .TeeOnFailureAsync(failures => ShowFailureMessages(failures))
      .TeeOnSuccessAsync(response => ShowOutput(response))
      .Wait();
  }
  #pragma warning restore CS4014

  private void Clear()
  {
    _inputModel = new InputModel();
    _outputModel = new OutputModel();
    _validationMessages = Array.Empty<string>();
    _validationFields = Array.Empty<string>();
  }

  private void HandleKeyPress(KeyboardEventArgs eventArgs)
  {
    if(eventArgs.Key == "enter")
    {
      Calc();
    }
  }

  private static CalculateLoan.Request ConvertToRequest(InputModel inputModel)
  {
    return new CalculateLoan.Request(
      assetCost: inputModel.AssetCost,
      downPayment: inputModel.DownPayment,
      escrowPerPeriod: inputModel.EscrowPerPeriod,
      numberOfYears: inputModel.NumberOfYears,
      periodsPerYear: inputModel.PeriodsPerYear,
      annualInterestRate: inputModel.AnnualInterestRate / 100);
  }

  private static OutputModel ConvertToOutputModel(CalculateLoan.Response response)
  {
    return new OutputModel
    {
      TotalPrincipal = $"{response.TotalPrincipal:c}",
      PaymentPerPeriod = $"{response.PaymentPerPeriod:c}",
      TotalInterestPaid = $"{response.TotalInterestPaid:c}",
      TotalEscrowPaid = $"{response.TotalEscrowPaid:c}",
      TotalPaid = $"{response.TotalPaid:c}",
      Schedule = response.Schedule.Select(p => new OutputPeriodModel(p.PeriodNumber, p.InterestPayment, p.PrincipalPayment, p.BalanceLeft)).ToList(),
    };
  }

  private void ShowOutput(CalculateLoan.Response response)
  {
    _outputModel = ConvertToOutputModel(response);
  }

  private void ShowFailureMessages(IEnumerable<IFailure> failures)
  {
    _validationMessages = failures.Select(f => f.Message);
    _validationFields = failures
      .Select(f => f.UiHandle)
      .Where(f => f is not null)
      .Select(f => f!);
  }

  private string GetInputCssForField(string fieldName)
  {
    return string.Join(" ",
      "form-control",
      (_validationFields.Contains(fieldName) ? "invalid" : null));
  }

  private static EventHandlerDecorator<CalculateLoan.Request, CalculateLoan.Response> BuildHandler()
  {
      return new CalculateLoan.Handler()
        .AddRequestValidator(new CalculateLoan.RequestValidator());
  }

  private class InputModel
  {
    public decimal AssetCost { get; set; }
    public decimal DownPayment { get; set; }
    public decimal EscrowPerPeriod { get; set; }
    public int NumberOfYears { get; set; } = 30;
    public int PeriodsPerYear { get; set; } = 12;
    public decimal AnnualInterestRate { get; set; }
  }

  private class OutputModel
  {
    public string TotalPrincipal { get; set; } = String.Empty;
    public string PaymentPerPeriod { get; set; } = String.Empty;
    public string TotalInterestPaid { get; set; } = String.Empty;
    public string TotalEscrowPaid { get; set; } = String.Empty;
    public string TotalPaid { get; set; } = String.Empty;
    public IReadOnlyList<OutputPeriodModel> Schedule { get; set; } = new List<OutputPeriodModel>();
  }

  private class OutputPeriodModel
  {
    public OutputPeriodModel(int periodNumber, decimal interestPayment, decimal principalPayment, decimal balanceLeft)
    {
        PeriodNumber = periodNumber.ToString();
        InterestPayment = $"{interestPayment:c}";
        PrincipalPayment = $"{principalPayment:c}";
        BalanceLeft = $"{balanceLeft:c}";
    }

    public string PeriodNumber { get; }
    public string InterestPayment { get; }
    public string PrincipalPayment { get; }
    public string BalanceLeft { get; }
  }
}
